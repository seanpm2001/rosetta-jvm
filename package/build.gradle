apply plugin: 'idea'
apply plugin: 'fpm-packaging'

evaluationDependsOn(':service')

ext {
  applicationName = 'rosetta-jvm'
  serviceTar = project(':service').configurations.serviceTar
      .getArtifacts()
      .getFiles()
      .getSingleFile()
  additionalContents = file('contents')
  afterInstallScript = file('scripts/rosetta-jvm.postinst')
  explodedDir = fileFrom(buildDir, "exploded")
}

packaging {
  baseDir = explodedDir
  extraOptions = ['-a': 'all',
                  '-m': 'rosetta-jvm@thoughtworks.com',
                  '-p': applicationName + "_" + version + "_all.deb",
                  '-n': applicationName,
                  '--deb-user': 0,
                  '--deb-group': 0,
                  '--vendor': applicationName,
                  '--provides': applicationName,
                  '--after-install': afterInstallScript,
                  '--url': 'https://github.com/thoughtworks/rosetta-jvm']
  packageDir = fileFrom(buildDir, "packages")
}

task(clean, type: Delete) {
  delete buildDir
}

task(prepare, dependsOn: ':service:assemble') << {
  copy {
    from tarTree(serviceTar).matching {
      exclude '**/*.bat'
    }
    into temporaryDir
  }
  copy {
    from fileFrom(temporaryDir, 'rosetta-jvm-' + version)
    into fileFrom(explodedDir, 'opt/rosetta-jvm')
  }
  copy {
    from additionalContents
    into explodedDir
  }
}

debian.dependsOn << 'prepare'

task(assemble, dependsOn: 'debian')
task(build, dependsOn: 'assemble')

def fileFrom(File parent, String child) {
  new File(parent, child)
}